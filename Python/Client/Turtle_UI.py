
import turtle
import time
from util import point_distance

class UI():
    def __init__(self, click_func=None):
        self.buttons = {
            'Go':{
                'pos':  [400,-355],
                'size':  20,
                'color': 'green'
            }, 
            'Stop':{
                'pos':  [400,-400],
                'size':  20,
                'color': 'red'
            }
        }
        turtle.speed(0)
        turtle.tracer(0,0)
        turtle.delay(0)
        turtle.ht()
        self.wn = turtle.Screen()
        self.wn.setup(900, 900)
        if click_func != None:
            turtle.onscreenclick(click_func)
    
    """ Draw the robot on the screen"""
    def draw_bot(self):
        turtle.penup()
        turtle.setpos(0,-15)
        turtle.color('blue')
        turtle.pendown()
        turtle.circle(15)
        turtle.penup()
        turtle.setpos(0, 0)
        turtle.pendown()
        turtle.setpos(0, 15)
        turtle.penup()

    """ Draw the buttons """
    def draw_buttons(self):
        for key in self.buttons:
            draw_x = self.buttons[key]['pos'][0]
            draw_y = self.buttons[key]['pos'][1] - (self.buttons[key]['size'])
            turtle.setpos(draw_x, draw_y)
            turtle.color(self.buttons[key]['color'])
            turtle.pendown()
            turtle.circle(self.buttons[key]['size'])
            turtle.penup()

    """ Draw points from numpy array in the format (2,x) """
    def draw_numpy_points(self, points, color='black'):
        turtle.penup()
        turtle.color(color)
        for p in range(points.shape[1]): #idx, point in enumerate(scan_points):
            turtle.setpos([points[0][p], points[1][p]])
            turtle.pendown()
            turtle.dot()
    
    """ Draw points from a standard python list in the format [[x1,y1],[x2,y2]...]"""
    def draw_basic_points(self, points, color='black', clustering=False):
        turtle.penup()
        turtle.color(color)
        last_p = [0,0]
        for p in points:
            #
            # if clustering:
            #     if point_distance(p, last_p) > 10:
            #         turtle.penup()
            #     last_p = p
            
            turtle.setpos(p) #round(p[0], 0), round(p[1], 0))
            
            turtle.pendown()
            
            #turtle.dot()
            

    
    """ Update the screen """
    def update(self):
        self.wn.update()

    """ Clear the screen """
    def clear(self):
        turtle.clear()



points = [[8.741329729888513, -339.78757945892215], [-672.2265625545062, -772.455467063411], [-743.6764461155799, -628.7520703686796], [-765.2634315897775, -468.09767773023395], [-686.0274892522565, -286.6330999557537], [-771.327972106563, -191.41835092534149], [-1122.8491601464245, -102.8531285789064], [-1227.672385122709, 75.22642775061644], [-1327.0986586765935, 288.05060343416477], [-550.417905150969, 212.53148076042507], [-867.6827638780986, 496.4642251903593], [-19.67382916049205, 18.345311285551208], [-1061.307756502921, 1147.3615596169923], [-802.661177726582, 1189.4304474813046], [-20.52705381973326, 48.347861239994614], [-349.3809055369828, 1179.492265911972], [-116.94698360374099, 863.8448232472001], [13.002006962882676, 692.4029343091617], [92.42929981486996, 530.9397142432772], [422.5774999391652, 1263.7448841321436], [621.5569290309935, 1207.5191898986782], [752.9708054659907, 1036.7085685552604], [704.0189102160937, 709.7587365141368], [557.1606579938758, 411.20995465678044], [1179.0411317636438, 620.7133091125934], [1411.8481957936983, 255.88902777196006], [1485.4974596046945, 39.5929050841068], [1525.0371486784688, -193.1900509230374], [813.1127108950228, -233.6793101794571], [465.6262723632466, -215.91141003918176], [299.1130952787731, -199.69846953031862], [153.4406011359548, -266.1349693727542], [90.41904651692843, -246.4358862401528], [89.91619941396122, -246.7262391456344], [387.76034044404497, -1003.9165096653797], [403.9358398530716, -1052.552420206326], [87.11144163562743, -245.92764532716254], [5.899581023241279, -259.93305858191684], [21.180725395415973, -690.87539894812], [43.261703561919155, -1535.3906424766697], [37.97633937731755, -1459.9561637759878], [-1.4752014122166137, -26.809443873258434], [3.851144560656516, -257.2461745304931], [29.361568478370785, -1485.784911728979], [5.22137729844185, -385.21461514214036], [2.673387516927352, -282.8623669281305], [0.5523806141337484, -180.4741546611512], [-0.813103723312341, -103.67181144040619], [4.751064856536806, -641.257399963329], [0.08598824311511746, -257.2749856302047], [-1.9007658948397166, -819.197794851166], [-3.846144372715378, -948.4672017515758], [-6.625935767588587, -1153.2559657769839], [-10.262102520792684, -1358.0362273801288], [-14.547954598727802, -1537.2061613986568], [-3.1969590201265525, -103.62569699656369], [-7.801527862865527, -462.03413960767546], [-11.337677303815969, -641.1997715793062], [-16.04389947725335, -845.947872678668], [-21.132163491460393, -1025.0822023946032], [-28.552831507402374, -1280.9818210313954], [-3.338876749104438, -52.393720063136286], [-10.423327741551415, -333.9373657421287], [-29.177336520143246, -869.9108247594062], [-17.238983740693204, -298.0017910006383], [-17.860318046537554, -298.96698653743783], [-19.142380474862325, -301.39271601973996], [-118.23969254217283, -279.0859815675672], [-410.19081876728296, -1022.7865822467686], [-545.1517733969523, -1354.8079880880382], [-69.34128936078402, -166.51404209490568], [-213.60137985259132, -522.4191904257241], [-330.09426815966725, -806.6748627099606], [-418.4828175463437, -1019.4489351696208], [-188.00031912047478, -448.59875168194526], [-356.3712911454472, -851.4544341726848], [-91.32822671115753, -213.07741698921404], [-279.8949842111862, -661.469470431871], [-469.90581861587253, -1109.2205119501473], [-521.6164615839396, -1226.3247080217584], [-182.90476018444315, -424.52433522929084], [-465.24959505556654, -1083.4023582795228], [-93.41759195046694, -212.22433682114794], [-377.556040440006, -870.3350655507709], [-124.4953737612518, -280.84291323094874], [-12.710052011413243, -23.707901169592596], [-12.758565903688446, -23.710221869085046], [-12.807120692433786, -23.71244735512204], [-645.0453501268164, -1451.7186459175803], [-12.894170501092118, -23.693690976476542], [-33.845965168183874, -70.52376384477847], [-233.04301372881076, -514.3156387396687], [-433.6751471821596, -957.4364325330075], [-488.00304851407924, -1073.3731106381251], [-502.1428040787974, -1095.1417282420036], [-295.9419849138881, -597.0823239430455], [-938.7186094283344, -907.4132092453438], [-296.1034242383849, -283.01046297673], [-1108.3667270394621, -1065.3127963264267], [-500.5803590588989, -478.5139017044999], [-1073.6072465163047, -1027.5508212383845], [-520.0358980948511, -495.1710515747884], [-1149.7288687075386, -1096.073151794844], [-687.7512127335826, -653.1122965336714], [-38.60187268145566, -33.635330018964986], [-57.98653826013975, -51.90656996571194], [-672.3335317315937, -631.8263311498833], [-76.73034755798803, -69.34828324212764], [-673.6542341360496, -630.4545941862685], [-114.23330183906843, -104.24670378934906], [-824.4673927143483, -769.0600717602002], [-488.57117406157823, -453.6008856925777], [-20.933495438018333, -16.57343563496916], [-751.9168274993747, -696.7799869028067], [-283.6599519335881, -260.49625197694206], [-1094.6625114856279, -1003.1674964570861], [-1039.3556713590908, -950.362831193273], [-908.1457192104799, -828.3001117829698], [-908.9999311003821, -827.3625854240091], [-890.9332497177522, -809.1789338875334], [-1119.0202128155954, -1014.9676476667321], [-1176.9333272892263, -1065.430873222618], [-191.42164159803528, -170.50829196233636]]

if __name__ == "__main__":
    tui = UI()
    try:
        while True:
            startTime = time.time()
            tui.clear()
            
            tui.draw_basic_points(points, color='black')
            
            tui.update()
            print(time.time() - startTime, end='\r')
    except KeyboardInterrupt:
        print("\nStopping")
